version: 2.1

orbs: 
  slack: circleci/slack@4.10.1
  aws-cli: circleci/aws-cli@1.3.0

executors:
  my-node-executor:
    docker:
      - image: circleci/node:13.8.0
  my-aws-executor:
    docker:
      - image: cimg/base:2020.01
  my-python-executor:
    docker:
      - image: python:3.9.1-alpine3.12

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            if aws s3 ls | grep udapeople-<<parameters.workflow_id>>; then
              aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            fi
            aws cloudformation delete-stack --stack-name frontend-<<parameters.workflow_id>>
            aws cloudformation delete-stack --stack-name backend-<<parameters.workflow_id>>

  slack-notifications:
    description: Provide slack notifications about jobs status.
    steps:
      - slack/notify:
          channel: notify
          mentions: '@jean.paul'
          event: fail
          template: basic_fail_1

jobs:
  build-frontend:
    executor: my-node-executor
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack-notifications

  build-backend:
    executor: my-node-executor
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack-notifications

  test-frontend:
    executor: my-node-executor
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: testing frontend
          command: |
            cd frontend
            npm run test
      - slack-notifications

  test-backend:
    executor: my-node-executor
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: testing backend
          command: |
            cd backend
            npm run test
      - slack-notifications

  scan-frontend:
    executor: my-node-executor
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scanning-frontend
          command: |
            cd frontend
            npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
      - slack-notifications

  scan-backend:
    executor: my-node-executor
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scanning-backend
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
      - slack-notifications

  deploy-infrastructure:
    executor: my-aws-executor
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text >> .circleci/ansible/inventory.txt
              cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - slack-notifications
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    executor: my-python-executor
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "24:3b:54:f5:83:68:bf:ab:a7:6a:b9:dd:a1:6a:55:83"
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible aws-cli
      - run:
          name: Configure server
          command: |
            ansible-playbook -i /tmp/.circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - slack-notifications
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"   

workflows:
  default:
    jobs:
      - build-frontend:
          context: [circle notify]
      - build-backend:
          context: [circle notify]
      - test-frontend:
          requires: [build-frontend]
          context: [circle notify]
      - test-backend:
          requires: [build-backend]
          context: [circle notify]
      - scan-backend:
          requires: [build-backend]
          context: [circle notify]
      - scan-frontend:
          requires: [build-frontend]
          context: [circle notify]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          context: [circle notify]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
          context: [circle notify]
