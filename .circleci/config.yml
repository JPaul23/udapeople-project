version: 2.1

orbs: 
  slack: circleci/slack@4.10.1
  aws-cli: circleci/aws-cli@1.3.0

executors:
  my-node-executor:
    docker:
      - image: circleci/node:13.8.0
  my-aws-executor:
    docker:
      - image: cimg/base:2020.01
  my-python-executor:
    docker:
      - image: python:3.9.1-alpine3.12

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID. 
    steps:
      - run:
          name: Delete S3 content
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            exit 0
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            exit 0

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - restore_cache:
          key: [backend-build]
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            status=$( curl --insecure https://kvdb.io/QBeGgdSsje56jKqLTYMMWK/migration_${CIRCLE_WORKFLOW_ID:0:7})
            echo $status
            if [[ "${status}" == 1 ]]; 
            then
                cd ~/project/backend
                npm install
                npm run migration:revert
            fi
  slack-notifications:
    description: Provide slack notifications about jobs status.
    steps:
      - slack/notify:
          channel: notify
          mentions: '@jean.paul'
          event: fail
          template: basic_fail_1

jobs:
  build-frontend:
    executor: my-node-executor
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack-notifications

  build-backend:
    executor: my-node-executor
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack-notifications

  test-frontend:
    executor: my-node-executor
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: testing frontend
          command: |
            cd frontend
            npm run test
      - slack-notifications

  test-backend:
    executor: my-node-executor
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: testing backend
          command: |
            cd backend
            npm run test
      - slack-notifications

  scan-frontend:
    executor: my-node-executor
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scanning-frontend
          command: |
            cd frontend
            npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
      - slack-notifications

  scan-backend:
    executor: my-node-executor
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scanning-backend
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
      - slack-notifications

  deploy-infrastructure:
    executor: my-aws-executor
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text >> .circleci/ansible/inventory.txt
              cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: .circleci/ansible
          paths:
            - inventory.txt
      - slack-notifications
      - destroy-environment

  configure-infrastructure:
    executor: my-python-executor
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "24:3b:54:f5:83:68:bf:ab:a7:6a:b9:dd:a1:6a:55:83"
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible aws-cli
      - run:
          name: Configure server
          command: |
            ansible-playbook -i /tmp/.circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - slack-notifications
      - destroy-environment

  run-migrations:
    executor: my-node-executor
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - aws-cli/setup
      - run:
          name: Prepare env for backend-build
          command: |
            cat \<< EOF > backend/.env
            ENVIRONMENT=production
            VERSION=1
            TYPEORM_CONNECTION=postgres
            TYPEORM_MIGRATIONS_DIR=./src/migrations
            TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts
            TYPEORM_MIGRATIONS=./src/migrations/*.ts
            TYPEORM_HOST=${TYPEORM_HOST}
            TYPEORM_PORT=${TYPEORM_PORT}
            TYPEORM_USERNAME=${TYPEORM_USERNAME}
            TYPEORM_PASSWORD=${TYPEORM_PASSWORD}
            TYPEORM_DATABASE=${TYPEORM_DATABASE}
            EOF
      - run:
          name: Run migrations
          command: |
            cd backend
            cat .env
            npm install
            npm run build
            npm run migrations 2>&1 | tee migrations.txt
            
            status_code="${PIPESTATUS[0]}"
            if [[ ! "${status_code}" == 0 ]]; then
              return 1
            fi
            cat migrations.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations.txt
            then
              curl https://kvdb.io/QBeGgdSsje56jKqLTYMMWK/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi

      - persist_to_workspace:
          root: ~/project
          paths:
            - backend
      - slack-notifications
      - revert-migrations
      - destroy-environment

  deploy-frontend:
    executor: my-node-executor
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [frontend-build]
      - aws-cli/setup
      - run:
          name: Install dependencies
          command: |
            cd frontend
            sudo npm install
            node --version
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
      - run:  
          name: Build frontend & Deploy frontend objects
          command: |
            cd frontend
            npm install
            ls -la
            cat .env
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - slack-notifications
      - revert-migrations
      - destroy-environment

  deploy-backend:
    executor: my-python-executor
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "24:3b:54:f5:83:68:bf:ab:a7:6a:b9:dd:a1:6a:55:83"
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: /tmp/artifacts
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible aws-cli openssh-client tar gzip
      - run:
          name: compress backend
          command: |
            tar -C /tmp/artifacts/backend -czvf artifact.tar.gz .
      - run:
          name: Deploy backend
          command: |
            cd .circleci/ansible
            export ANSIBLE_HOST_KEY_CHECKING=False
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i /tmp/artifacts/inventory.txt deploy-backend.yml
      - slack-notifications
      - revert-migrations
      - destroy-environment

  smoke-test:
    executor: my-node-executor
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install -y python3 ansible
      - run:
          name: Get backend url and Backend smoke test
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            curl "${API_URL}/api/status" | grep "ok"
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - slack-notifications
      - revert-migrations
      - destroy-environment 

  cloudfront-update:
    executor: my-aws-executor
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: Save Old Workflow ID to kvdb.io
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation \
                      list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                      --no-paginate --output text)
            echo "Old Wokflow ID: $OLD_WORKFLOW_ID"
            curl https://kvdb.io/QBeGgdSsje56jKqLTYMMWK/old_workflow_id -d "${OLD_WORKFLOW_ID}"
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name "udapeople-cloudfront" \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - slack-notifications
      - revert-migrations
      - destroy-environment  
  
  cleanup:
    executor: my-aws-executor
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: Remove old stacks and files
          command: |
            export STACKS=($(aws cloudformation list-stacks \
                --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"
            export OldWorkflowID=$(curl --insecure https://kvdb.io/QBeGgdSsje56jKqLTYMMWK/old_workflow_id)
            echo Old Workflow ID: $OldWorkflowID 
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi

workflows:
  default:
    jobs:
      - build-frontend:
          context: [circle notify]
      - build-backend:
          context: [circle notify]
      - test-frontend:
          requires: [build-frontend]
          context: [circle notify]
      - test-backend:
          requires: [build-backend]
          context: [circle notify]
      - scan-backend:
          requires: [build-backend]
          context: [circle notify]
      - scan-frontend:
          requires: [build-frontend]
          context: [circle notify]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          context: [circle notify]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
          context: [circle notify]
      - run-migrations:
          requires: [configure-infrastructure]
          context: [circle notify]
      - deploy-frontend:
          requires: [run-migrations]
          context: [circle notify]
      - deploy-backend:
          requires: [run-migrations]
          context: [circle notify]
      - smoke-test:
          requires: [deploy-frontend, deploy-backend]
          context: [circle notify]
      - cloudfront-update:
          requires: [smoke-test]
          context: [circle notify]
      - cleanup:
          requires: [cloudfront-update]
          context: [circle notify]
